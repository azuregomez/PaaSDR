{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Vault"
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Tenant Id of the subscription. Get using Get-AzureRmSubscription cmdlet or Get Subscription API"
      }
    },
    "ADUserObjectID": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the AD user. Get using Get-AzureRmADUser or Get-AzureRmADServicePrincipal cmdlets"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "SKU for the vault"
      }
    },
    "enableVaultForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies if the vault is enabled for a VM deployment"
      }
    },
    "enableVaultForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "secretsObject": {
      "type": "secureObject",
      "defaultValue": "{}",
      "metadata": {
        "description": "all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object"
      }
    },
    "appServiceName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 20
    },
    "appServicePlanName": {
      "type": "string",
      "minLength": 1
    },
    "appServicePlanSkuName": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "F1",
        "D1",
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "metadata": {
        "description": "Describes plan's pricing tier and capacity. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "repoURL": {
      "type": "string"
    },
    "repoBranch": {
      "type": "string"
    },
    "trafficManagerDNSName": {
      "type": "string"
    }
  },
  "resources": [
    {
      "comments": "***** Key Vault *****",
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVaultName')]",
      "apiVersion": "2016-10-01",
      "location": "[parameters('location')]",
      "properties": {
        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "tenantId": "[parameters('tenantId')]",
        "accessPolicies": [
          {
            "tenantId": "[parameters('tenantId')]",
            "objectId": "[parameters('ADUserObjectID')]",
            "permissions": {
              "keys": ["all"],
              "secrets": ["all"]
            }
          }
        ],
        "sku": {
          "name": "[parameters('skuName')]",
          "family": "A"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('keyVaultName'), '/', parameters('secretsObject').secrets[copyIndex()].secretName)]",
      "apiVersion": "2015-06-01",
      "properties": {
        "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
      ],
      "copy": {
        "name": "secretsCopy",
        "count": "[length(parameters('secretsObject').secrets)]"
      }
    },
    {
      "comments": "***** App Service Plan *****",
      "name": "[parameters('appServicePlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-08-01",
      "sku": {
        "name": "[parameters('appServicePlanSkuName')]"
      },
      "dependsOn": [ ],
      "tags": {
        "displayName": "appServicePlan"
      },
      "properties": {
        "name": "[parameters('appServicePlanName')]",
        "numberOfWorkers": 1
      }
    },
    {
      "comments": "***** App Service Web Site  *****",
      "name": "[parameters('appServiceName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-08-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      } ,
      "tags": {
        "[concat('hidden-related:', resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName')))]": "Resource",
        "displayName": "webApp"
      },
      "properties": {
        "name": "[parameters('appServiceName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', parameters('appServiceName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('repoURL')]",
            "branch": "[parameters('repoBranch')]",
            "IsManualIntegration": true
          }
        }
      ]
    },
    {
      "comments": "***** Traffic Manager  *****",
      "apiVersion": "2015-11-01",
      "type": "Microsoft.Network/trafficManagerProfiles",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('appServiceName'))]"
      ],
      "name": "[parameters('trafficManagerDNSName')]",
      "location": "global",
      "properties": {
        "profileStatus": "Enabled",
        "trafficRoutingMethod": "Priority",
        "dnsConfig": {
          "relativeName": "[parameters('trafficManagerDNSName')]",
          "ttl": 30
        },
        "monitorConfig": {
          "protocol": "HTTP",
          "port": 80,
          "path": "/"
        },
        "endpoints": [
          {
            "name": "[concat(parameters('trafficManagerDNSName'),'Endpoint')]",
            "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
            "properties": {
              "targetResourceId": "[resourceId('Microsoft.Web/sites/', concat(parameters('appServiceName')))]",
              "endpointStatus": "Enabled"
            }
          }
        ]
      }
    }
  ]
}